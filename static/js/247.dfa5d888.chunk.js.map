{"version":3,"file":"static/js/247.dfa5d888.chunk.js","mappings":"0OA2DA,UAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACRC,EAAUb,EACZ,GAAG,CAACA,IAEJ,IAAMa,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMjB,GAAO,IAAAkB,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACV,OAAnBX,GAAa,GAAMS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEEC,EAAAA,EAAAA,IAAmBvB,GAAS,KAAD,EAAxCkB,EAAIE,EAAAI,KACFL,EAASD,EAATC,KACRZ,GAAU,SAAAkB,GAAS,SAAAC,QAAAC,EAAAA,EAAAA,GAAQF,IAASE,EAAAA,EAAAA,GAAKR,GAAI,IAAGC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEhDS,QAAQC,IAAGV,EAAAQ,IAAQ,QAEC,OAFDR,EAAAC,KAAA,GAEnBV,GAAa,GAAOS,EAAAW,OAAA,6BAAAX,EAAAY,OAAA,GAAAf,EAAA,wBAEvB,gBAXcgB,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAaf,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG3B,IAAcJ,EAAOgC,SAAUC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACtClC,EAAOgC,QACNC,EAAAA,EAAAA,KAAA,MAAAF,SACG/B,EAAOmC,KAAI,SAAAC,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAWC,EAAEJ,EAAFI,GAAE,OAC9CV,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGM,GACCJ,EAAAA,EAAAA,KAAA,OACEQ,MAAM,KACNC,IAAG,mCAAAtB,OAAqCiB,GACxCM,IAAKL,KAGPL,EAAAA,EAAAA,KAAA,OACEQ,MAAM,KACNC,IAAG,6EACHC,IAAKL,KAGTL,EAAAA,EAAAA,KAAA,KAAAF,SAAIO,KACJR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYQ,OAfRC,EAgBJ,MAGP,MAEFxC,EAAOgC,SAAW5B,GAAS,wCAGnC,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport { fetchActorsOfMovie } from 'helpers/getMoviesData';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getActors(movieId);\n  }, [movieId]);\n\n  const getActors = async movieId => {\n    setIsLoading(true);\n    try {\n      const data = await fetchActorsOfMovie(movieId);\n      const { cast } = data;\n      setActors(prevState => [...prevState, ...cast]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {isLoading && !actors.length && <Loader />}\n      {actors.length ? (\n        <ul>\n          {actors.map(({ profile_path, name, character, id }) => (\n            <li key={id}>\n              {profile_path ? (\n                <img\n                  width=\"70\"\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                />\n              ) : (\n                <img\n                  width=\"70\"\n                  src={`https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`}\n                  alt={name}\n                />\n              )}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n\n      {!actors.length && !isLoading && `We do not have Casts for this films`}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","isLoading","setIsLoading","useEffect","getActors","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","cast","_context","prev","next","fetchActorsOfMovie","sent","prevState","concat","_toConsumableArray","t0","console","log","finish","stop","_x","apply","arguments","_jsxs","children","length","_jsx","Loader","map","_ref2","profile_path","name","character","id","width","src","alt"],"sourceRoot":""}