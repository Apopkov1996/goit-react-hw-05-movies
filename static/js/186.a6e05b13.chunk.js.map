{"version":3,"file":"static/js/186.a6e05b13.chunk.js","mappings":"0OA8CA,UAzCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACRC,EAAWb,EACb,GAAG,CAACA,IAEJ,IAAMa,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMX,GAAO,IAAAY,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACX,OAAnBX,GAAa,GAAMS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEEC,EAAAA,EAAAA,IAAoBjB,GAAS,KAAD,EAAzCY,EAAIE,EAAAI,KACFL,EAAYD,EAAZC,QACRZ,GAAW,SAAAkB,GAAS,SAAAC,QAAAC,EAAAA,EAAAA,GAAQF,IAASE,EAAAA,EAAAA,GAAKR,GAAO,IAAGC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,iBAGhC,OAHgCA,EAAAC,KAAA,GAGpDV,GAAa,GAAOS,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAb,EAAA,wBAEvB,gBAVec,GAAA,OAAAjB,EAAAkB,MAAA,KAAAC,UAAA,KAYhB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGzB,IAAcJ,EAAQ8B,SAAUC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACvChC,EAAQ8B,QACPC,EAAAA,EAAAA,KAAA,MAAAF,SACG7B,EAAQiC,KAAI,SAAAC,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAASC,EAAEH,EAAFG,GAAE,OACjCT,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQM,MACXJ,EAAAA,EAAAA,KAAA,KAAAF,SAAIO,KACJL,EAAAA,EAAAA,KAAA,WAHOM,EAIJ,MAGP,MAEFrC,EAAQ8B,SAAW1B,GAAS,yCAGpC,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport { fetchReviewsOfMovie } from 'helpers/getMoviesData';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getReviews(movieId);\n  }, [movieId]);\n\n  const getReviews = async reviews => {\n    setIsLoading(true);\n    try {\n      const data = await fetchReviewsOfMovie(reviews);\n      const { results } = data;\n      setReviews(prevState => [...prevState, ...results]);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      {isLoading && !reviews.length && <Loader />}\n      {reviews.length ? (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <p>Autor: {author}</p>\n              <p>{content}</p>\n              <hr />\n            </li>\n          ))}\n        </ul>\n      ) : null}\n\n      {!reviews.length && !isLoading && `We do not have Reviws for this films`}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","isLoading","setIsLoading","useEffect","getReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","results","_context","prev","next","fetchReviewsOfMovie","sent","prevState","concat","_toConsumableArray","t0","finish","stop","_x","apply","arguments","_jsxs","children","length","_jsx","Loader","map","_ref2","author","content","id"],"sourceRoot":""}